// pub type ValidtionDetails = std::collections::HashMap<String,Vec<Box<dyn ValidationRule>>>;

pub trait ValidationRule<T> {
    fn validate(value: T) -> Result<()>;
}

#[derive(Debug)]
pub enum Rules {
    MaxLength(i16),
    MinLength(i16)
}

impl std::fmt::Display for Rules {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Rules::MaxLength(max_length) => { write!(f, "Maximum length must be: {}", max_length) },
            Rules::MinLength(min_length) => { write!(f, "Minimum length must be: {}", min_length) },
        }
    }
}

impl ValidationRule<String> for Rules {
    fn validate(value: String) -> Result<()> {
        todo!()
    }
}

// Error

pub type Result<T> = std::result::Result<T,Error>;

#[derive(Debug)]
pub enum Error {
    RuleNotValidated
}

impl std::fmt::Display for Error {
    fn fmt(
        &self,
        f: &mut std::fmt::Formatter
    ) -> core::result::Result<(),core::fmt::Error> {
        // let details_str: Vec<String> = self.details.iter().map(
        //     |(k,v)| {
        //         format!("{}: {:?}", k, v)
        //     }
        // ).collect();
        // write!(f, "Validation error: {}", details_str.join(", "))
        write!(f,"{self:?}")
    }
}

impl std::error::Error for Error {}
